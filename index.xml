<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dev.bins</title>
    <link>https://devbins.github.io/</link>
    <description>Recent content on dev.bins</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Sun, 27 Oct 2019 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://devbins.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Parallels tools 安装失败</title>
      <link>https://devbins.github.io/post/parallel/</link>
      <pubDate>Sun, 27 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/parallel/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo by zhang Mickey on Unsplash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;缘由&#34;&gt;缘由&lt;/h2&gt;

&lt;p&gt;最近做实验，需要一个新的 &lt;code&gt;Linux&lt;/code&gt; 环境来折腾，于是就去下载了最新版的 &lt;code&gt;Manjaro&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;按照常规安装好虚拟机之后，我还会安装 &lt;code&gt;Parallels tools&lt;/code&gt; 来更好的体验 &lt;code&gt;Linux&lt;/code&gt; 。 &lt;code&gt;Parallels tools&lt;/code&gt; 可以方便的在宿主机和虚拟机之间拷贝文件和共享文件，当然还有最重要的就是显示效果会好上一大截，鼠标移动不会卡顿，窗口的缩放可以自适应等，所以没有理由不装。&lt;/p&gt;

&lt;p&gt;在安装的过程中碰到了安装失败的情况，下面记录一下解决的过程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在emacs中用PlantUml画uml</title>
      <link>https://devbins.github.io/post/plantuml/</link>
      <pubDate>Mon, 23 Sep 2019 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/plantuml/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo by Thomas Martinsen on Unsplash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;平时需要画 &lt;code&gt;UML&lt;/code&gt; 图，用的比较多的就是 &lt;a href=&#34;http://staruml.io/&#34;&gt;StarUML&lt;/a&gt; 、 &lt;code&gt;Visio&lt;/code&gt; 、 &lt;code&gt;Rational Rose&lt;/code&gt; 。其中 &lt;a href=&#34;http://staruml.io/&#34;&gt;StarUML&lt;/a&gt; 是跨平台的免费软件，相比其他的收费软件是个不错的选择。&lt;/p&gt;

&lt;p&gt;今天要介绍的是&lt;a href=&#34;http://plantuml.com/zh/index&#34;&gt;PlantUML&lt;/a&gt;它是一个开源的用文字来描述的工具，简单来说就是用文字去写出各种 &lt;code&gt;UML&lt;/code&gt; 图，而不是用鼠标去拖拽。上面介绍的工具都是通过鼠标去拖拽的方式去画出各种 &lt;code&gt;UML&lt;/code&gt; 图。可能由于是个开发的缘故，天生就喜欢纯文本的东西，解析起来方便，占用内存小，改起来也方便，只要一个文本编辑器就可以改。当然我使用的原因是可以在 &lt;code&gt;Emacs&lt;/code&gt; 中通过 &lt;code&gt;Org Mode&lt;/code&gt; 结合 &lt;code&gt;Org-Babel&lt;/code&gt; 使用，生成对应的 &lt;code&gt;UML&lt;/code&gt; 图，所见即所得。&lt;/p&gt;

&lt;p&gt;这里有一个&lt;a href=&#34;http://www.plantuml.com/plantuml/&#34;&gt;在线体验&lt;/a&gt;的网址，有兴趣可以点击链接，前去体验。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>拔智齿</title>
      <link>https://devbins.github.io/post/tooth/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/tooth/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo by Luigi Liccardo on Unsplash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;智齿简介&#34;&gt;智齿简介&lt;/h2&gt;

&lt;p&gt;引用一段&lt;a href=&#34;https://baike.baidu.com/item/%E6%99%BA%E6%85%A7%E9%BD%BF/9756141?fr=aladdin&#34;&gt;百度百科&lt;/a&gt;的介绍。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;智齿也称智慧齿、是人类的第三磨牙，随着遗传基因的不同智齿一般会在 16-30 岁之间长出，也是人一生中最后长出的牙齿，所以它最靠近喉咙，因为此时期的人们心智比较成熟而得名。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>UML类图</title>
      <link>https://devbins.github.io/post/uml/</link>
      <pubDate>Wed, 11 Sep 2019 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/uml/</guid>
      <description>&lt;p&gt;Photo by Moralis Tsai on Unsplash&lt;/p&gt;

&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;

&lt;p&gt;UML（Unified Modeling Language）统一建模语言，对于程序员来说接触比较多的就是类图了。在学习 &lt;code&gt;UML&lt;/code&gt; 的时候没有好好学，导致后面许多别人画的类图看不懂，一些优秀的资料也看不懂，看到有 &lt;code&gt;UML&lt;/code&gt; 的都会下意识的跳过，这样下去不行，所以回来学习 &lt;code&gt;UML&lt;/code&gt; 相关知识。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dockerfile</title>
      <link>https://devbins.github.io/post/dockerfile/</link>
      <pubDate>Sat, 17 Aug 2019 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/dockerfile/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;之前总结过 Docker 的使用,讲解了 Docker 的安装、相关概念以及基本使用。里面介绍的都是如何使用别人制作好的镜像，显然是不能满足我们的需要。接下来就来讲讲私人订制自己的镜像。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>RxLifecycle 原理解析</title>
      <link>https://devbins.github.io/post/rxlifecycle/</link>
      <pubDate>Sat, 27 Jul 2019 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/rxlifecycle/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo by Léonard Cotte on Unsplash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;

&lt;p&gt;从名字中可以看出 &lt;code&gt;RxLifecycle&lt;/code&gt; 和生命周期有关。也的确如此， &lt;code&gt;RxLifecycle&lt;/code&gt; 通过监听生命周期的变化，来解决 &lt;code&gt;RxJava&lt;/code&gt; 内存泄漏的问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 hugo 搭建网站</title>
      <link>https://devbins.github.io/post/hugo/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/hugo/</guid>
      <description>hugo 是一个静态网站生成器，通过 hugo 可以快速生成属于你的静态网站。 安装 hugo brew install hugo 创建网站 hugo new site blog 选择主题 在Hugo Themes中选择一个喜欢的主题，下载到新 themes 目录下 cd themes &amp;amp;&amp;amp; git clone https://github.com/budparr/gohugo-theme-ananke.git 在网站根目录下的 config.toml 中把 theme 改成 gohugo-theme-ananke 配置 不同的主题会有不同的配置，这要根据实际情况来配置。这里讲一些常见的配置。 baseUrl 网站的首页，填写你申请的域名，比如： https://bingomacs.github.io languageCode 网站使用什么语言，比如 zh-cn title 网站的名称 theme 网站的主题，上一节配置的 以上都是必须要配置的，</description>
    </item>
    
    <item>
      <title>Retrofit 源码解析</title>
      <link>https://devbins.github.io/post/retrofit/</link>
      <pubDate>Sun, 02 Dec 2018 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/retrofit/</guid>
      <description>&lt;p&gt;Photo by Kimon Maritz on Unsplash&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Retrofit 是 square 推出用来请求 RESTful 风格 API 的网络库，可以让开发人员快速开发 RESTful 风格的应用。&lt;/p&gt;

&lt;p&gt;本文基于 &lt;code&gt;retrofit2.5.0&lt;/code&gt; 进行分析。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>在 emacs 中用 mu4e 来收邮件</title>
      <link>https://devbins.github.io/post/mu4e/</link>
      <pubDate>Sun, 25 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/mu4e/</guid>
      <description>&lt;p&gt;Photo by Joanna Kosinska on Unsplash&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;使用 emacs 的人喜欢把所有的事情都使用 emacs 来管理，总是把有意思的事情集成进 emacs。其中乐趣（痛苦）只有折腾过才能体会。&lt;/p&gt;

&lt;p&gt;最近想在 Linux 中收发邮件，网页版使用起来多有不便，于是想着用 emacs 来收发邮件岂不是很有趣。&lt;/p&gt;

&lt;p&gt;在 emacs 中折腾邮件也是一件很费力的事，看了好多文章有用 guns、mu4e、Wander Lust 的。试了一下 mu4e 比较容易上手，就决定是它了。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>在 Docker 中使用 nexus3 构建 Android 私有仓库</title>
      <link>https://devbins.github.io/post/nexus3/</link>
      <pubDate>Mon, 05 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/nexus3/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在 Android 中使用第三库有两种方式，第一种是把 jar 文件放到 libs 目录下作为 library 引用，第二种需要开发者把编译好的 jar 包上传到类似 maven 这种中央仓库，然后在项目中添加依赖就可以了。&lt;/p&gt;

&lt;p&gt;使用 jcenter 来管理第三方库在升级版本时非常方便，只需要更改版本号就可以了。不然每次版本升级都需要到指定的地方下载下来，然后替换旧版本，这样就非常麻烦。但是 maven 是所有人员都可以访问的，有一些公司的项目是不能公开，所以需要我们搭建自己的 maven 仓库，这就是本文要讲的。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Linux 下 svn 使用</title>
      <link>https://devbins.github.io/post/linuxsvn/</link>
      <pubDate>Sun, 04 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/linuxsvn/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在上一篇文章中讲到了在 Linux 下搭建 SVN 服务器，其实在工作中我们用的比较多的还是代码管理，这篇文章就来聊一聊在 Linux 下用 svn 管理代码。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Linux 下 svn 服务搭建</title>
      <link>https://devbins.github.io/post/svnserve/</link>
      <pubDate>Sun, 28 Oct 2018 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/svnserve/</guid>
      <description>&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install subversion
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>在 Docker 中用 Jenkins 搭建 Android 自动化打包</title>
      <link>https://devbins.github.io/post/jenkins/</link>
      <pubDate>Tue, 02 Oct 2018 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/jenkins/</guid>
      <description>Jenkins 是一个持续集成的工具，帮你构建和打包自动化，不用手动做这些操作。构建完成后可以帮你上传到第三方测试平台，或者做其他一些操作。例如：发送邮件通知测试人员可以开始测试了，邮件中包含下载地址，或者二维码。整个流程不需要手动管理，非常高效。 Docker 中的 Jenkins Jenkins 官方提供 docker 的镜像，我们可以直接使用。但如果要用来打包 Android 项目还需要把 Android SDK 装上，不然没法构建 Android 项目。 所以我们基于 Jenkins 镜像进行定制，把它改造成带有 Android SDK 的镜像。 命令行</description>
    </item>
    
    <item>
      <title>ArchLinux 安装 UEFI &#43; GPT</title>
      <link>https://devbins.github.io/post/archlinux%E5%AE%89%E8%A3%85uefi/</link>
      <pubDate>Fri, 28 Sep 2018 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/archlinux%E5%AE%89%E8%A3%85uefi/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;之前写过一篇 Arch Linux 安装的文章，不过那是使用 MBR 引导的，但是现在很多机器都已经使用上 UEFI 了，这里就是在 UEFI 上的实践。&lt;/p&gt;

&lt;p&gt;本篇文章只讲和 MBR 不一样的地方，不然文章会显得啰嗦很长。MBR 安装方式会在文末给出链接，两篇结合起来看会好点。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Arch Linux 安装</title>
      <link>https://devbins.github.io/post/archlinux/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/archlinux/</guid>
      <description>&lt;p&gt;今年开始我一直使用 &lt;code&gt;Manjaro&lt;/code&gt; ，这是一个基于 &lt;code&gt;Arch&lt;/code&gt; 的发行版，有较友好的安装界面。省去了不少折腾，但是这也带来了一些问题，你不知道有些东西是没有必要的，驱动怎么安装，分区怎么分。从头开始会让你更了解 &lt;code&gt;Linux&lt;/code&gt; ，虽然这么说，但我还是没有选择折腾，直到最近在升级的时候有线网卡找不到了，一下子和全球的人失去了联系，进入了孤岛，这是多么痛苦的一件事。于是下定决心，折腾一下。&lt;/p&gt;

&lt;p&gt;本文不适合一点 Linux 都不懂的小白，至少你有使用过，懂得基本命令。如果你是新手 &lt;code&gt;Manjaro&lt;/code&gt; 或者 &lt;code&gt;Ubuntu&lt;/code&gt; 可能会适合你。&lt;/p&gt;

&lt;p&gt;本文教程需要你准备一个额外的 4G U 盘，制作环境是 Linux。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>单例模式的多种写法</title>
      <link>https://devbins.github.io/post/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;单例模式介绍&#34;&gt;单例模式介绍&lt;/h2&gt;

&lt;p&gt;单例模式算是平常用的比较多的，而且也比较简单的模式之一。单例模式的作用就是保证在程序中只有一个实例存在。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Appium 做测试</title>
      <link>https://devbins.github.io/post/appium/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/appium/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文使用 Windows7 64bit 操作系统。如果你的操作系统不是 64 位的，不可直接使用下文中提供的地址。但是文末给出了各个软件对应操的作系统下载链接，请根据自己的系统自行选择对应的下载，以免误伤自己，毕竟折腾很容易受伤。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>小米路由器刷 Padavan</title>
      <link>https://devbins.github.io/post/miwifipadavan/</link>
      <pubDate>Sun, 13 May 2018 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/miwifipadavan/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;半个月前，我把小米路由器刷成了 openwrt，使用之后发现很难受。很多软件没办法直接下载，更新源也更了半天更不下来。里面的功能配置起来有些复杂不能开箱即用，用来折腾倒是不错，但是一款路由器是可是互联网的通道，随便瞎搞没了网络，就不好玩了。在折腾的过程中发现了 Padavan。刷上用了一段时间还不错，记录一下。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>小米路由器刷 openwrt</title>
      <link>https://devbins.github.io/post/miwifi/</link>
      <pubDate>Mon, 30 Apr 2018 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/miwifi/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;我买过两个小米路由器，一个是小米路由器 mini、另一个是小米路由器 R2D 带硬盘的。mini 一直放在家里用，没怎么去折腾。后来买 R2D 是因为电脑的空间剩余不多，买个带硬盘的，把一部分文件放到路由器上。买来后就不断在小米论坛上逛，看看有没有什么好玩的，后来发现了 openwrt。这就开启了折腾之旅，有搭建网站的、下载的、代理的……各种，这就是一台 Linux 电脑啊，很是兴奋也想搞个自己的。&lt;/p&gt;

&lt;p&gt;开始在论坛上找各种教程，发现 R2D 的 opkg 居然不能用，试了各种办法都效果不好，最糟糕的是 R2D 居然不能装 openwrt，这就没得玩了。R2D 也就一直充当着一个硬盘的作用,偶尔也折腾一下，看看论坛有没有出能装 openwrt 的教程，等的我心都凉了，以后买路由器想折腾还是不要买小米的。
今年过年回家发现 WiFi 连不上了，跑到放路由器的地方一看，多出了一个白色的家伙，看着也像路由器，研究了一下这家伙确实是路由器，而且还是装宽带送的，这下好了，mini 腾出来了，也就有了下文。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Manjaro 的使用</title>
      <link>https://devbins.github.io/post/manjaro/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/manjaro/</guid>
      <description>&lt;h2 id=&#34;manjaro-使用的原因&#34;&gt;Manjaro 使用的原因&lt;/h2&gt;

&lt;p&gt;最近把操作系统换成了 Linux，Linux 发行版众多，选择一个作为日常使用非常纠结。之前折腾过 RHEL 系、openSUSE、都非常不错，不过装 QQ 等国产软件还是比较麻烦，偶然在&lt;a href=&#34;https://emacs-china.org/&#34;&gt;emacs-china&lt;/a&gt;上看到有人推荐使用 Manjaro 于是我就抱着尝试的心态试试，发现还不错。在&lt;a href=&#34;https://distrowatch.com/table.php?distribution=manjaro&#34;&gt;distrowatch&lt;/a&gt;上排名排在第二，人气很高，这就让我放心了，那么多人使用解决问题也会比较方便。真正让我选择它的是在虚拟机上打开 Android Studio 速度比其他发行版快。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 SSH 登录服务器</title>
      <link>https://devbins.github.io/post/ssh/</link>
      <pubDate>Sat, 13 Jan 2018 11:30:51 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/ssh/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;常常和服务器打交道的同志，最频繁的操作就是登陆服务器。每次登陆服务器都要输入密码特别的烦人。
有没有一种办法可以只输入一次密码，以后有都不用再输入密码的办法？如果有多个服务器怎么办？又要输密码吗？
其实我们常常使用 SSH 登录服务器，这个 SSH 就提供了这样的操作，不过需要配置。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Siri 帮我开灯</title>
      <link>https://devbins.github.io/post/siri%E5%B8%AE%E6%88%91%E5%BC%80%E7%81%AF/</link>
      <pubDate>Sun, 07 Jan 2018 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/siri%E5%B8%AE%E6%88%91%E5%BC%80%E7%81%AF/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;苹果自从发布了 HomeKit，可以方便的把家里的智能设备连接在一起，结合 Siri 可以说说话就让家里的设备运转起来。但是只有苹果认证的设备才能用，没有认证的还是没有办法使用的。好在有&lt;a href=&#34;https://github.com/nfarina&#34;&gt;nfarina&lt;/a&gt;逆向了苹果的协议，做出了&lt;a href=&#34;https://github.com/nfarina/homebridge&#34;&gt;homebridge&lt;/a&gt;才使得众多智能设备接入 HomeKit 成为现实。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>2017 的我</title>
      <link>https://devbins.github.io/post/2017%E7%9A%84%E6%88%91/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/2017%E7%9A%84%E6%88%91/</guid>
      <description>&lt;h2 id=&#34;这一年的变化&#34;&gt;这一年的变化&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;比较明显的肚子有些变大，估计也重了不少，总不至于太瘦了。&lt;/li&gt;
&lt;li&gt;买了一些硬件，做了一些好玩的东西。&lt;/li&gt;
&lt;li&gt;工作之余简单学了一下 Vue、小程序开发，了解了一点人工智能，毕竟这么火不可能忽视。&lt;/li&gt;
&lt;li&gt;看了一些书。&lt;/li&gt;
&lt;li&gt;从 Vim 转到了 Emacs，也没有完全放弃 Vim，只是可能我以后绝大多数都会使用 Emacs。&lt;/li&gt;
&lt;li&gt;写了几篇博客。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>使用 Git 管理 SVN 项目</title>
      <link>https://devbins.github.io/post/git%E7%AE%A1%E7%90%86svn/</link>
      <pubDate>Sat, 02 Dec 2017 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/git%E7%AE%A1%E7%90%86svn/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Git 中有一个神奇的功能，他可以让你用 Git 来管理 SVN。两个之间互不冲突，对于喜欢使用 Git 的同志，这是一个非常不错的选择。自从有了它妈妈再也不用担心 SVN 不好用了。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Vue 使用总结</title>
      <link>https://devbins.github.io/post/vue%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 15 Nov 2017 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/vue%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文基于 Vue 2.0,聊一聊 Vue 的使用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;简单介绍&#34;&gt;简单介绍&lt;/h2&gt;

&lt;p&gt;Vue.js (读音 /vjuː/，类似于 view) 是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与单文件组件和 Vue 生态系统支持的库结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动。&lt;/p&gt;

&lt;p&gt;我个人觉得有基础的人学习 Vue 上手是比较快的，使用也是简单，并且还有完整的生态并且社区活跃，相信学习 Vue 会是一件有价值的事。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 之 urllib</title>
      <link>https://devbins.github.io/post/python%E4%B9%8Burllib/</link>
      <pubDate>Mon, 13 Nov 2017 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/python%E4%B9%8Burllib/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;之前用 Python 写的一个爬虫，现在用 Emacs 打开，提示找不到 &lt;code&gt;urllib.urlopen&lt;/code&gt; 这个函数。调试了半天，就是提示找不到这个函数，但是这个爬虫却能正确执行。于是我打开&lt;a href=&#34;https://kapeli.com/dash&#34;&gt;Dash&lt;/a&gt;查看其 API，发现 API 中有这个函数，但是却不是使用 &lt;code&gt;urllib.urlopen&lt;/code&gt; 来调用。而是变成了 &lt;code&gt;urllib.request.urlopen&lt;/code&gt; ，仔细一看当前查看的是 Python3 的版本，看来是 Python 版本的锅。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>ReactNative 入门</title>
      <link>https://devbins.github.io/post/reactnative%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sat, 21 Oct 2017 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/reactnative%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;ReactNative 在本文使用 RN 代替，代码使用 ES6 语法&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;开发环境搭建&#34;&gt;开发环境搭建&lt;/h2&gt;

&lt;h3 id=&#34;node-的安装&#34;&gt;Node 的安装&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install node
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>openSUSE 下安装 Parallels Tools</title>
      <link>https://devbins.github.io/post/opensuse/</link>
      <pubDate>Mon, 18 Sep 2017 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/opensuse/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Parallels Desktop 是 macOS 上一款优秀的虚拟机软件，支持各种操作系统。然而想要在其上面愉快的使用桌面操作系统，还需要在虚拟机上安装 Parallels Tools 这个工具。在 Windows 上和 Ubuntu 以及 Centos 上安装还是非常简单，然而我在 openSUSE 上尝试却失败了，寻找良久才找到解决方法。遂以此文纪念我踩过的坑，以便给后人提供参考，而不会错过一些美好的事情。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Tmux</title>
      <link>https://devbins.github.io/post/tmux/</link>
      <pubDate>Sun, 18 Jun 2017 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/tmux/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;做开发经常需要在各种环境中切来切去，回来的时候环境已经变了。Tmux 可以创建多个会话在不同环境中切换，回来的时候还是那个她，熟悉的味道。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>树莓派入门</title>
      <link>https://devbins.github.io/post/raspberry/</link>
      <pubDate>Mon, 22 May 2017 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/raspberry/</guid>
      <description>&lt;h2 id=&#34;树莓派简单介绍&#34;&gt;树莓派简单介绍&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Raspberry Pi(中文名为“树莓派”,简写为 RPi，(或者 RasPi / RPI)是为学生计算机编程教育而设计，只有信用卡大小的卡片式电脑，其系统基于 Linux。—— 来自百度百科的介绍&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Docker 使用</title>
      <link>https://devbins.github.io/post/docker%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 22 Apr 2017 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/docker%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;h2 id=&#34;docker-简介&#34;&gt;Docker 简介&lt;/h2&gt;

&lt;p&gt;Docker 是一个开源的应用容器引擎。可以看成是一个特殊的环境，隔离了宿主机（电脑）和容器。做开发的时候通常会碰到在自己的电脑上没问题，放到服务器或者别人的电脑上就出问题了，通常我们会认为是环境不一致导致的，调试起来非常耗时费力。有了 Docker 这些问题迎刃而解。&lt;/p&gt;

&lt;p&gt;经常在 Linux 上做测试的人员，做完测试就不用了。在过去我们会使用虚拟机，这样做不但占据者比较大的磁盘空间，而且运行启动耗时较长，性能不高。但是用 Docker 却可以随时随地启动一个 Linux 的容器，用完就可以删除，下次要用在重新开启一个新的，速度非常快。Docker 比虚拟机来的轻巧，开启和关闭非常迅速，占用的资源少。既然 Docker 有那么多的好处，没有理由不去调戏它。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 Mac 终端中使用代理</title>
      <link>https://devbins.github.io/post/mac%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86/</link>
      <pubDate>Thu, 09 Mar 2017 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/mac%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86/</guid>
      <description>作为一个程序员，天天和终端打交道。可是在 Mac 终端下使用 brew 安装软件却十分慢，即便你使用 ShadowSocks 配置了全局代理，却发现这么做依然没有效果，下载还是龟速。虽然可以通过配置国内的镜像来解决，但是后期下载还是很慢，效果就不好了。 简单使用 在终端使用 ShadowSocks 十分简单，只需在终端中输入下列指令就可 export ALL_PROXY = socks5://127.0.0.1:1080 现在可以试试 brew 更新软件了，速度蹭蹭的往上涨 不想用代理了，输入下面指令即可 unset ALL_PROXY 优化 每次想要使用代理的时候都要输入这么多记不住 把</description>
    </item>
    
    <item>
      <title>Android 网络服务发现（NSD）</title>
      <link>https://devbins.github.io/post/nsd/</link>
      <pubDate>Mon, 03 Oct 2016 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/nsd/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这些日子碰到这样一个需求，需要在局域网中发现我们创建的某个特定设备，并连上互相通信。本以为要去遍历整个局域网，后来查阅相关资料后发现 Android 为我们提供了网络服务发现（Network Service Discovery）简称 NSD，就是本文要讲的东西了。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Go 入门</title>
      <link>https://devbins.github.io/post/go%E5%85%A5%E9%97%A8/</link>
      <pubDate>Fri, 12 Aug 2016 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/go%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;h2 id=&#34;go-语言简介&#34;&gt;Go 语言简介&lt;/h2&gt;

&lt;p&gt;Go 是一门开源，在语言层上支持并发，带垃圾回收的新型编译型语言。具有动态语言的开发效率，静态语言的安全性。Go 语言是 Google 开发的，Go 语言的主要作者都是牛逼到不行的人物。比如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;肯·汤普逊(Ken Thompson):C 语言的设计者，Unix 操作系统的创建者，并于 1983 年获得图灵奖。&lt;/li&gt;
&lt;li&gt;罗布·派克:Unix 小组的成员，《Unix 编程环境》作者之一。&lt;/li&gt;
&lt;li&gt;罗伯特·格里泽默(Robert Griesemer)参与 Java 的 HotSpot 编译器和 Chrome 浏览器的 JavaScript 引擎 V8 的制作。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有这么多牛逼哄哄的人物镇楼，Go 语言的表现注定不会平庸。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hexo 搭建博客</title>
      <link>https://devbins.github.io/post/hexo/</link>
      <pubDate>Thu, 16 Jun 2016 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/hexo/</guid>
      <description>&lt;h2 id=&#34;安装-hexo-前的准备&#34;&gt;安装 Hexo 前的准备&lt;/h2&gt;

&lt;h3 id=&#34;node-dot-js-的安装&#34;&gt;Node.js 的安装&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install node
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;安装-git-当然你还得有-github-账号&#34;&gt;安装 Git，当然你还得有 GitHub 账号&lt;/h3&gt;

&lt;p&gt;安装过 Xcode 的可以跳过这一步，Xcode 自带 Git。
没安装的可以安装 Xcode 也可以使用下面的命令安装&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install git
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://devbins.github.io/about/</link>
      <pubDate>Sun, 29 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://devbins.github.io/about/</guid>
      <description>喜欢开源、爱自由、爱折腾 让繁琐重复的事自动化 emacser</description>
    </item>
    
  </channel>
</rss>