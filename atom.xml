<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>自定义</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://github.com/binsheng/"/>
  <updated>2017-11-27T01:46:42.380Z</updated>
  <id>http://github.com/binsheng/</id>
  
  <author>
    <name>binsheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue使用总结</title>
    <link href="http://github.com/binsheng/2017/11/15/Vue%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://github.com/binsheng/2017/11/15/Vue使用总结/</id>
    <published>2017-11-15T03:00:24.000Z</published>
    <updated>2017-11-27T01:46:42.380Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/vue.png&quot; alt=&quot;Vue&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文基于 Vue 2.0,聊一聊 Vue 的使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;简单介绍（官网介绍）&quot;&gt;&lt;a href=&quot;#简单介绍（官网介绍）&quot; class=&quot;headerlink&quot; title=&quot;简单介绍（官网介绍）&quot;&gt;&lt;/a&gt;简单介绍（官网介绍）&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Vue.js (读音 /vjuː/，类似于 view) 是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与单文件组件和 Vue 生态系统支持的库结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我个人觉得有基础的人学习 Vue 上手是比较快的，使用也是简单，并且还有完整的生态并且社区活跃，相信学习 Vue 会是一件有价值的事。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://github.com/binsheng/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://github.com/binsheng/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Python之urllib</title>
    <link href="http://github.com/binsheng/2017/11/03/Python%E4%B9%8Burllib/"/>
    <id>http://github.com/binsheng/2017/11/03/Python之urllib/</id>
    <published>2017-11-03T07:41:44.000Z</published>
    <updated>2017-11-19T02:28:27.179Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前用 Python 写的一个爬虫，现在用 Emacs 打开，提示找不到&lt;code&gt;urllib.urlopen&lt;/code&gt;这个函数。调试了半天，就是提示找不到这个函数，但是这个爬虫却能正确执行。于是我打开&lt;a href=&quot;https://kapeli.com/dash&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dash&lt;/a&gt;查看其 API，发现 API 中有这个函数，但是却不是使用&lt;code&gt;urllib.urlopen&lt;/code&gt;来调用。而是变成了&lt;code&gt;urllib.request.urlopen&lt;/code&gt;，仔细一看当前查看的是 Python3 的版本，看来是 Python 版本的锅。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;urllib-简单介绍&quot;&gt;&lt;a href=&quot;#urllib-简单介绍&quot; class=&quot;headerlink&quot; title=&quot;urllib 简单介绍&quot;&gt;&lt;/a&gt;urllib 简单介绍&lt;/h1&gt;&lt;p&gt;urllib 是 Python3 中的标准网络请求库，使用 urllib 来获取网页的内容非常方便。在 Python2.x 版本中有 urllib 和 urllib2，但是到了 Python3 中 urllib 和 urllib2 被合并成了 urllib，所以之前在 Python2 中的写法就不能再出现在 Python3 中了。Python3 是趋势，所以折腾吧，少年。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://github.com/binsheng/categories/Python/"/>
    
    
      <category term="urllib" scheme="http://github.com/binsheng/tags/urllib/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative入门</title>
    <link href="http://github.com/binsheng/2017/10/21/ReactNative%E5%85%A5%E9%97%A8/"/>
    <id>http://github.com/binsheng/2017/10/21/ReactNative入门/</id>
    <published>2017-10-21T10:12:53.581Z</published>
    <updated>2017-10-23T15:00:56.374Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/rn.jpg&quot; alt=&quot;rn&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;React Native 在本文使用 RN 代替，代码使用 ES6 语法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;开发环境搭建&quot;&gt;&lt;a href=&quot;#开发环境搭建&quot; class=&quot;headerlink&quot; title=&quot;开发环境搭建&quot;&gt;&lt;/a&gt;开发环境搭建&lt;/h1&gt;&lt;h2 id=&quot;Node-的安装&quot;&gt;&lt;a href=&quot;#Node-的安装&quot; class=&quot;headerlink&quot; title=&quot;Node 的安装&quot;&gt;&lt;/a&gt;Node 的安装&lt;/h2&gt;&lt;p&gt;&lt;code&gt;brew install node&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ReactNative" scheme="http://github.com/binsheng/categories/ReactNative/"/>
    
    
      <category term="ReactNative" scheme="http://github.com/binsheng/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>openSUSE 下安装 Parallels Tools</title>
    <link href="http://github.com/binsheng/2017/09/18/openSUSE%E4%B8%8B%E5%AE%89%E8%A3%85Parallels-Tools/"/>
    <id>http://github.com/binsheng/2017/09/18/openSUSE下安装Parallels-Tools/</id>
    <published>2017-09-18T11:42:23.000Z</published>
    <updated>2017-09-21T13:39:12.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/suse.gif&quot; alt=&quot;suse&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Parallels Desktop 是 macOS 上一款优秀的虚拟机软件，支持各种操作系统。然而想要在其上面愉快的使用桌面操作系统，还需要在虚拟机上安装 Parallels Tools 这个工具。在 Windows 上和 Ubuntu 以及 Centos 上安装还是非常简单，然而我在 openSUSE 上尝试却失败了，寻找良久才找到解决方法。遂以此文纪念我踩过的坑，以便给后人提供参考，而不会错过一些美好的事情。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://github.com/binsheng/categories/Linux/"/>
    
    
      <category term="openSUSE" scheme="http://github.com/binsheng/tags/openSUSE/"/>
    
  </entry>
  
  <entry>
    <title>使用 Git Submodule 管理多个仓库</title>
    <link href="http://github.com/binsheng/2017/09/02/Git-Submodule/"/>
    <id>http://github.com/binsheng/2017/09/02/Git-Submodule/</id>
    <published>2017-09-02T03:53:40.000Z</published>
    <updated>2017-09-21T13:42:00.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/git.jpeg&quot; alt=&quot;Git&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;开发中常常碰到在项目中需要使用另一个项目，这个项目不定期更新。而且我们想要保持对这个项目的更新，通常的做法是在项目中创建一个目录来单独存放这个项目，然后不定期更新这个项目。这样的做法确实可行，但是却不是最优雅的。在 Git 中有&lt;code&gt;Git Submodule&lt;/code&gt;这个工具，它可以将另一个项目克隆到当前项目，并作为当前项目的子目录，并且保持提交独立。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Git" scheme="http://github.com/binsheng/categories/Git/"/>
    
    
      <category term="Git" scheme="http://github.com/binsheng/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Tmux</title>
    <link href="http://github.com/binsheng/2017/06/18/Tmux/"/>
    <id>http://github.com/binsheng/2017/06/18/Tmux/</id>
    <published>2017-06-18T01:41:18.000Z</published>
    <updated>2017-11-15T01:58:05.573Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;做开发经常需要在各种环境中切来切去，回来的时候环境已经变了。Tmux 可以创建多个会话在不同环境中切换，回来的时候还是那个她，熟悉的味道。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;什么是Tmux&quot;&gt;&lt;a href=&quot;#什么是Tmux&quot; class=&quot;headerlink&quot; title=&quot;什么是Tmux&quot;&gt;&lt;/a&gt;什么是Tmux&lt;/h1&gt;&lt;p&gt;来自 Tmux 自述&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen.  tmux may be detached from a screen and continue running in the background, then later reattached.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具 效率" scheme="http://github.com/binsheng/categories/%E5%B7%A5%E5%85%B7-%E6%95%88%E7%8E%87/"/>
    
    
      <category term="工具 效率" scheme="http://github.com/binsheng/tags/%E5%B7%A5%E5%85%B7-%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>树莓派入门</title>
    <link href="http://github.com/binsheng/2017/05/22/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8/"/>
    <id>http://github.com/binsheng/2017/05/22/树莓派入门/</id>
    <published>2017-05-22T03:19:53.000Z</published>
    <updated>2017-09-21T13:40:16.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/pi.jpg&quot; alt=&quot;树莓派&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;树莓派的简单介绍&quot;&gt;&lt;a href=&quot;#树莓派的简单介绍&quot; class=&quot;headerlink&quot; title=&quot;树莓派的简单介绍&quot;&gt;&lt;/a&gt;树莓派的简单介绍&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Raspberry Pi(中文名为“树莓派”,简写为RPi，(或者RasPi / RPI)是为学生计算机编程教育而设计，只有信用卡大小的卡片式电脑，其系统基于Linux。&lt;br&gt;—— 来自百度百科的介绍&lt;br&gt;
    
    </summary>
    
      <category term="Raspberry Pi" scheme="http://github.com/binsheng/categories/Raspberry-Pi/"/>
    
    
      <category term="Raspberry Pi" scheme="http://github.com/binsheng/tags/Raspberry-Pi/"/>
    
  </entry>
  
  <entry>
    <title>Docker 使用小记</title>
    <link href="http://github.com/binsheng/2017/04/22/Docker%E4%BD%BF%E7%94%A8/"/>
    <id>http://github.com/binsheng/2017/04/22/Docker使用/</id>
    <published>2017-04-22T14:23:59.000Z</published>
    <updated>2017-11-11T12:33:34.742Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/docker.png&quot; alt=&quot;Docker&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Docker-简介&quot;&gt;&lt;a href=&quot;#Docker-简介&quot; class=&quot;headerlink&quot; title=&quot;Docker 简介&quot;&gt;&lt;/a&gt;Docker 简介&lt;/h1&gt;&lt;p&gt;Docker 是一个开源的应用容器引擎。可以看成是一个特殊的环境，隔离了宿主机（电脑）和容器。做开发的时候通常会碰到在自己的电脑上没问题，放到服务器或者别人的电脑上就出问题了，通常我们会认为是环境不一致导致的，调试起来非常耗时费力。有了 Docker 这些问题迎刃而解。&lt;br&gt;经常在 Linux 上做测试的人员，做完测试就不用了。在过去我们会使用虚拟机，这样做不但占据者比较大的磁盘空间，而且运行启动耗时较长，性能不高。但是用 Docker 却可以随时随地启动一个 Linux 的容器，用完就可以删除，下次要用在重新开启一个新的，速度非常快。 Docker 比虚拟机来的轻巧，开启和关闭非常迅速，占用的资源少。既然 Docker 有那么多的好处，没有理由不去调戏它。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://github.com/binsheng/categories/Docker/"/>
    
    
      <category term="Docker Linux" scheme="http://github.com/binsheng/tags/Docker-Linux/"/>
    
  </entry>
  
  <entry>
    <title>在 Mac 终端中使用代理</title>
    <link href="http://github.com/binsheng/2017/03/09/%E5%9C%A8mac%E7%BB%88%E7%AB%AF%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/"/>
    <id>http://github.com/binsheng/2017/03/09/在mac终端中使用代理/</id>
    <published>2017-03-09T07:51:22.000Z</published>
    <updated>2017-09-21T13:39:52.000Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;作为一个程序员，天天和终端打交道。可是在 Mac 终端下使用 &lt;code&gt;brew&lt;/code&gt; 安装软件却十分慢，即便你使用 ShadowSocks 配置了全局代理，却发现这么做依然没有效果，下载还是龟速。虽然可以通过配置国内的镜像来解决，但是后期下载还是很慢，效果就不好了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://github.com/binsheng/categories/Mac/"/>
    
    
      <category term="Proxy" scheme="http://github.com/binsheng/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>Android 网络服务发现（NSD）</title>
    <link href="http://github.com/binsheng/2016/10/03/Android%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/"/>
    <id>http://github.com/binsheng/2016/10/03/Android网络服务发现/</id>
    <published>2016-10-03T11:55:57.000Z</published>
    <updated>2017-06-28T01:30:00.000Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这些日子碰到这样一个需求，需要在局域网中发现我们创建的某个特定设备，并连上互相通信。本以为要去遍历整个局域网，后来查阅相关资料后发现 Android 为我们提供了网络服务发现（Network Service Discovery）简称 NSD，就是本文要讲的东西了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;NSD-有什么用&quot;&gt;&lt;a href=&quot;#NSD-有什么用&quot; class=&quot;headerlink&quot; title=&quot;NSD 有什么用&quot;&gt;&lt;/a&gt;NSD 有什么用&lt;/h2&gt;&lt;p&gt;用来扫描局域网中特定的服务，并与之通信。省去了自己去写发现协议。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://github.com/binsheng/categories/Android/"/>
    
    
      <category term="Network" scheme="http://github.com/binsheng/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>Go语言开发环境搭建</title>
    <link href="http://github.com/binsheng/2016/08/12/Go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://github.com/binsheng/2016/08/12/Go语言开发环境搭建/</id>
    <published>2016-08-12T09:50:36.000Z</published>
    <updated>2017-11-18T07:51:59.686Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/go.png&quot; alt=&quot;Go&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Go语言简介&quot;&gt;&lt;a href=&quot;#Go语言简介&quot; class=&quot;headerlink&quot; title=&quot;Go语言简介&quot;&gt;&lt;/a&gt;Go语言简介&lt;/h1&gt;&lt;p&gt;Go 是一门开源，在语言层上支持并发，带垃圾回收的新型编译型语言。具有动态语言的开发效率，静态语言的安全性。Go 语言是 Google 开发的，Go 语言的主要作者都是牛逼到不行的人物。比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;肯·汤普逊(Ken Thompson):C 语言的设计者，Unix 操作系统的创建者，并于 1983 年获得图灵奖。&lt;/li&gt;
&lt;li&gt;罗布·派克:Unix 小组的成员，《Unix编程环境》作者之一。&lt;/li&gt;
&lt;li&gt;罗伯特·格里泽默(Robert Griesemer)参与 Java 的 HotSpot 编译器和 Chrome 浏览器的 JavaScript 引擎 V8 的制作。&lt;br&gt;有这么多牛逼哄哄的人物镇楼，Go 语言的表现注定不会平庸。
    
    </summary>
    
      <category term="Go" scheme="http://github.com/binsheng/categories/Go/"/>
    
    
      <category term="Go" scheme="http://github.com/binsheng/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>用 Hexo 搭建博客</title>
    <link href="http://github.com/binsheng/2016/06/16/hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://github.com/binsheng/2016/06/16/hexo博客/</id>
    <published>2016-06-16T08:28:22.000Z</published>
    <updated>2017-09-21T13:42:50.000Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装-Hexo-前环境的搭建&quot;&gt;&lt;a href=&quot;#安装-Hexo-前环境的搭建&quot; class=&quot;headerlink&quot; title=&quot;安装 Hexo 前环境的搭建&quot;&gt;&lt;/a&gt;安装 Hexo 前环境的搭建&lt;/h3&gt;&lt;h4 id=&quot;Node-js-的安装&quot;&gt;&lt;a href=&quot;#Node-js-的安装&quot; class=&quot;headerlink&quot; title=&quot;Node.js 的安装&quot;&gt;&lt;/a&gt;Node.js 的安装&lt;/h4&gt;&lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;brew install node&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; ps：如果没有安装 brew 请移步 &lt;a href=&quot;http://brew.sh/index_zh-cn.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Homebrew&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;安装-Git，当然你还得有-GitHub-账号&quot;&gt;&lt;a href=&quot;#安装-Git，当然你还得有-GitHub-账号&quot; class=&quot;headerlink&quot; title=&quot;安装 Git，当然你还得有 GitHub 账号&quot;&gt;&lt;/a&gt;安装 Git，当然你还得有 GitHub 账号&lt;/h4&gt;&lt;p&gt;安装过 Xcode 的可以跳过这一步，Xcode 的自带 Git。&lt;br&gt;没安装的可以安装 Xcode 也可以使用下面的命令安装&lt;br&gt;&lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;brew install git&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="GitHub" scheme="http://github.com/binsheng/categories/GitHub/"/>
    
    
      <category term="Hexo" scheme="http://github.com/binsheng/tags/Hexo/"/>
    
  </entry>
  
</feed>
