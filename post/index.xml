<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 自定义</title>
    <link>https://binsheng.github.io/post/</link>
    <description>Recent content in Posts on 自定义</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Sun, 28 Oct 2018 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://binsheng.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux 下 svn 服务搭建</title>
      <link>https://binsheng.github.io/post/svnserve/</link>
      <pubDate>Sun, 28 Oct 2018 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/svnserve/</guid>
      <description>&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install subversion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 Docker 中用 Jenkins 搭建 Android 自动化打包</title>
      <link>https://binsheng.github.io/post/jenkins/</link>
      <pubDate>Tue, 02 Oct 2018 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/jenkins/</guid>
      <description>Jenkins 是一个持续集成的工具，帮你构建和打包自动化，不用手动做这些操作。构建完成后可以帮你上传到第三方测试平台，或者做其他一些操作。例如：发送邮件通知测试人员可以开始测试了，邮件中包含下载地址，或者二维码。整个流程不需要手动管理，非常高效。 Docker 中的 Jenkins Jenkins 官方提供 docker 的镜像，我们可以直接使用。但如果要用来打包 Android 项目还需要把 Android SDK 装上，不然没法构建 Android 项目。 所以我们基于 Jenkins 镜像进行定制，把它改造成带有 Android SDK 的镜像。 命令行</description>
    </item>
    
    <item>
      <title>ArchLinux 安装 UEFI &#43; GPT</title>
      <link>https://binsheng.github.io/post/archlinux%E5%AE%89%E8%A3%85uefi/</link>
      <pubDate>Fri, 28 Sep 2018 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/archlinux%E5%AE%89%E8%A3%85uefi/</guid>
      <description>之前写过一篇 Arch Linux 安装的文章，不过那是使用 MBR 引导的，但是现在很多机器都已经使用上 UEFI 了，这里就是在 UEFI 上的实践。 本篇文章只讲和 MBR 不一样的地方，不然文章会显得啰嗦很长。MBR 安装方式会在文末给出链接，两篇结合起来看会好点。 UEFI 安装前先确认一下是不是 UEFI 启动的。如果是会输出一些文件，如果不是什么都没有。 ls /sys/firmware/efi/efivars 分区 parted malabel gpt # 采用 gpt 分区表 mkpart ESP fat32 1M 513M # 创建 ESP 分区 set 1 boot on # 设置启动 flag mkpart primary ext4 513M 10G # / 根分区 mkpart primary ext4 10G 20G # /home mkpart primary linux-swap</description>
    </item>
    
    <item>
      <title>Arch Linux 安装</title>
      <link>https://binsheng.github.io/post/archlinux/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/archlinux/</guid>
      <description>今年开始我一直使用 Manjaro ，这是一个基于 Arch 的发行版，有较友好的安装界面。省去了不少折腾，但是这也带来了一些问题，你不知道有些东西是没有必要的，驱动怎么安装，分区怎么分。从头开始会让你更了解 Linux ，虽然这么说，但我还是没有选择折腾，直到最近在升级的时候有线网卡找不到了，一下子和全球的人失去了联系，进入了孤岛，这是多么痛苦的一件事。于是下定决心，折腾一下。 本文不适合一点 Linux 都不懂的小白，至少你有使用过，懂得基本命</description>
    </item>
    
    <item>
      <title>单例模式的多种写法</title>
      <link>https://binsheng.github.io/post/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>单例模式介绍 单例模式算是平常用的比较多的，而且也比较简单的模式之一。单例模式的作用就是保证在程序中只有一个实例存在。 单例模式实现原理 单例模式需要保证在系统中只有一个实例，单例的对象就不能被随便创建。通常我们实例化对象通过 new 关键字来创建对象，如果用这种方式任何人想要该对象都可以通过 new 来实例化，这就不能保证单例模式的唯一性了。所以我们要让别人不能实例化该对象，该对象只能由我们实例化并提供给外部。实现这</description>
    </item>
    
    <item>
      <title>使用 Appium 做测试</title>
      <link>https://binsheng.github.io/post/appium/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/appium/</guid>
      <description>本文使用 Windows7 64bit 操作系统。如果你的操作系统不是 64 位的，不可直接使用下文中提供的地址。但是文末给出了各个软件对应操的作系统下载链接，请根据自己的系统自行选择对应的下载，以免误伤自己，毕竟折腾很容易受伤。 Python 的安装 Python 的安装方式有很多，这里选择 Anaconda 安装， Anaconda 是一个用于科学计算的 Python 发行版，包含了众多流行的科学计算、数据分析的 Python 包。使用起来比较方便。 点击Anaconda3-5.2.0-Windows-x86_64.e</description>
    </item>
    
    <item>
      <title>小米路由器刷 Padavan</title>
      <link>https://binsheng.github.io/post/miwifipadavan/</link>
      <pubDate>Sun, 13 May 2018 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/miwifipadavan/</guid>
      <description>半个月前，我把小米路由器刷成了 openwrt，使用之后发现很难受。很多软件没办法直接下载，更新源也更了半天更不下来。里面的功能配置起来有些复杂不能开箱即用，用来折腾倒是不错，但是一款路由器是可是互联网的通道，随便瞎搞没了网络，就不好玩了。在折腾的过程中发现了 Padavan。刷上用了一段时间还不错，记录一下。 备份重要信息 在刷之前，请确保已经是开发版固件，如果不是请刷到开发版，并开启 SSH。如何操作参</description>
    </item>
    
    <item>
      <title>小米路由器刷 openwrt</title>
      <link>https://binsheng.github.io/post/miwifi/</link>
      <pubDate>Mon, 30 Apr 2018 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/miwifi/</guid>
      <description>我买过两个小米路由器，一个是小米路由器 mini、另一个是小米路由器 R2D 带硬盘的。mini 一直放在家里用，没怎么去折腾。后来买 R2D 是因为电脑的空间剩余不多，买个带硬盘的，把一部分文件放到路由器上。买来后就不断在小米论坛上逛，看看有没有什么好玩的，后来发现了 openwrt。这就开启了折腾之旅，有搭建网站的、下载的、代理的……各种，这就是一台 Linux 电脑啊，很是兴奋也想搞个自己的。 开始在论坛上找各种教程，发现 R2D 的</description>
    </item>
    
    <item>
      <title>Manjaro 的使用</title>
      <link>https://binsheng.github.io/post/manjaro/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/manjaro/</guid>
      <description>Manjaro 使用的原因 最近把操作系统换成了 Linux，Linux 发行版众多，选择一个作为日常使用非常纠结。之前折腾过 RHEL 系、openSUSE、都非常不错，不过装 QQ 等国产软件还是比较麻烦，偶然在emacs-china上看到有人推荐使用 Manjaro 于是我就抱着尝试的心态试试，发现还不错。在distrowatch上排名排在第二，人气很高，这就让我放心了，那么多人使用解决问题也会比较方便。真正让我选择它的是在虚拟机上打开 Android Studio 速</description>
    </item>
    
    <item>
      <title>使用 SSH 登录服务器</title>
      <link>https://binsheng.github.io/post/ssh/</link>
      <pubDate>Sat, 13 Jan 2018 11:30:51 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/ssh/</guid>
      <description>常常和服务器打交道的同志，最频繁的操作就是登陆服务器。每次登陆服务器都要输入密码特别的烦人。 有没有一种办法可以只输入一次密码，以后有都不用再输入密码的办法？如果有多个服务器怎么办？又要输密码吗？ 其实我们常常使用 SSH 登录服务器，这个 SSH 就提供了这样的操作，不过需要配置。 生成公私钥文件 要不想每次都输入密码才登录服务器，那就得让程序来做，但是这样又不安全，所以我们先要加密。比较安全的就是 SSH，配合 rsa 算法来</description>
    </item>
    
    <item>
      <title>Siri 帮我开灯</title>
      <link>https://binsheng.github.io/post/siri%E5%B8%AE%E6%88%91%E5%BC%80%E7%81%AF/</link>
      <pubDate>Sun, 07 Jan 2018 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/siri%E5%B8%AE%E6%88%91%E5%BC%80%E7%81%AF/</guid>
      <description>苹果自从发布了 HomeKit，可以方便的把家里的智能设备连接在一起，结合 Siri 可以说说话就让家里的设备运转起来。但是只有苹果认证的设备才能用，没有认证的还是没有办法使用的。好在有nfarina逆向了苹果的协议，做出了homebridge才使得众多智能设备接入 HomeKit 成为现实。 材料准备 树莓派（我手上的是树莓派 3B） Yeelight 灯一个（我用的是 Yeelight 台灯） iPhone 或者 iPad 一个，要求 iOS10 以上（这里我使用 iPad） Yeelight 设置局域网控制（极客模</description>
    </item>
    
    <item>
      <title>2017 的我</title>
      <link>https://binsheng.github.io/post/2017%E7%9A%84%E6%88%91/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/2017%E7%9A%84%E6%88%91/</guid>
      <description>这一年的变化 比较明显的肚子有些变大，估计也重了不少，总不至于太瘦了。 买了一些硬件，做了一些好玩的东西。 工作之余简单学了一下 Vue、小程序开发，了解了一点人工智能，毕竟这么火不可能忽视。 看了一些书。 从 Vim 转到了 Emacs，也没有完全放弃 Vim，只是可能我以后绝大多数都会使用 Emacs。 写了几篇博客。 买了一些装备 RaspberryPi 其实我很早就想买一个树莓派来玩，但是没有找到好的切入点，想着有电脑也没啥用。 让我下定决心买</description>
    </item>
    
    <item>
      <title>使用 Git 管理 SVN 项目</title>
      <link>https://binsheng.github.io/post/git%E7%AE%A1%E7%90%86svn/</link>
      <pubDate>Sat, 02 Dec 2017 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/git%E7%AE%A1%E7%90%86svn/</guid>
      <description>Git 中有一个神奇的功能，他可以让你用 Git 来管理 SVN。两个之间互不冲突，对于喜欢使用 Git 的同志，这是一个非常不错的选择。自从有了它妈妈再也不用担心 SVN 不好用了。 缘起 公司的项目是使用 svn 来管理的，而我更偏向使用 git ，但是公司使用的是 svn 我也没办法。 最开始在 macOS 上使用命令行来操作 svn ，但是好久没用了，命令也基本都忘了。找了半天也没有满意的客户端软件，直到别人推荐 Cornerstone ，用了一段时间还不错。但是后面用着还是发现了许多问题，用</description>
    </item>
    
    <item>
      <title>Vue 使用总结</title>
      <link>https://binsheng.github.io/post/vue%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 15 Nov 2017 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/vue%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid>
      <description>本文基于 Vue 2.0,聊一聊 Vue 的使用。 简单介绍 Vue.js (读音 /vjuː/，类似于 view) 是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与单文件组件和 Vue 生态系统支持的库结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动。 我个人觉得有基础的人学习 Vue 上手是比较快的，使用也是简单，并</description>
    </item>
    
    <item>
      <title>Python 之 urllib</title>
      <link>https://binsheng.github.io/post/python%E4%B9%8Burllib/</link>
      <pubDate>Mon, 13 Nov 2017 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/python%E4%B9%8Burllib/</guid>
      <description>之前用 Python 写的一个爬虫，现在用 Emacs 打开，提示找不到 urllib.urlopen 这个函数。调试了半天，就是提示找不到这个函数，但是这个爬虫却能正确执行。于是我打开Dash查看其 API，发现 API 中有这个函数，但是却不是使用 urllib.urlopen 来调用。而是变成了 urllib.request.urlopen ，仔细一看当前查看的是 Python3 的版本，看来是 Python 版本的锅。 urllib 简单介绍 urllib 是 Python3 中的标准网络请求库，使用 urllib 来获取网页的内容非常方便。在 Python2.x 版本中有 urllib 和 urllib2，但是到了 Python3 中 urllib 和 urllib2 被合并成了 urllib，</description>
    </item>
    
    <item>
      <title>ReactNative 入门</title>
      <link>https://binsheng.github.io/post/reactnative%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sat, 21 Oct 2017 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/reactnative%E5%85%A5%E9%97%A8/</guid>
      <description>ReactNative 在本文使用 RN 代替，代码使用 ES6 语法 开发环境搭建 Node 的安装 brew install node RN 脚手架安装 npm install -g create-react-native-app 使用脚手架创建一个 RN 项目 create-react-native-app RNDemo cd RNDemo npm start 稍等片刻，成功启动之后会显示一张二维码，可以扫描这个二维码安装 App。当然也可以输入 i 启动 iOS 模拟器，或者 a 启动安卓模拟器。在模拟器中找到 Expo 这个 App，打开后可以看到如下界面，说明开发环境搭建成功了。 直接运行并启动 Android 模拟器 npm run android 直接运行并启动 iOS 模拟器 npm run ios 组件 组件中有两个重要的字段分别</description>
    </item>
    
    <item>
      <title>openSUSE 下安装 Parallels Tools</title>
      <link>https://binsheng.github.io/post/opensuse/</link>
      <pubDate>Mon, 18 Sep 2017 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/opensuse/</guid>
      <description>Parallels Desktop 是 macOS 上一款优秀的虚拟机软件，支持各种操作系统。然而想要在其上面愉快的使用桌面操作系统，还需要在虚拟机上安装 Parallels Tools 这个工具。在 Windows 上和 Ubuntu 以及 Centos 上安装还是非常简单，然而我在 openSUSE 上尝试却失败了，寻找良久才找到解决方法。遂以此文纪念我踩过的坑，以便给后人提供参考，而不会错过一些美好的事情。 安装 Parallels Tools 初试 在 Parallels Desktop 上成功安装好 openSUSE 后，把 Parallels Tools 挂载到系统（不要和我说你不知道怎么操作）。进入挂载的目录，并执行安装程序 cd /run/media/$USER/Parallels Tools/</description>
    </item>
    
    <item>
      <title>Tmux</title>
      <link>https://binsheng.github.io/post/tmux/</link>
      <pubDate>Sun, 18 Jun 2017 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/tmux/</guid>
      <description>做开发经常需要在各种环境中切来切去，回来的时候环境已经变了。Tmux 可以创建多个会话在不同环境中切换，回来的时候还是那个她，熟悉的味道。 什么是 Tmux Tmux 的自述 tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen. tmux may be detached from a screen and continue running in the background, then later reattached. 说人话 Tmux 是终端复用器，它使多个终端被创建，访问，并从单一屏幕控制。Tmux 可以从屏幕分离并继续在后台运行，然后重新连接。 Tmux 有什么用 举个例子： 你连上服务器后做了一会事情要回到本</description>
    </item>
    
    <item>
      <title>树莓派入门</title>
      <link>https://binsheng.github.io/post/raspberry/</link>
      <pubDate>Mon, 22 May 2017 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/raspberry/</guid>
      <description>树莓派简单介绍 Raspberry Pi(中文名为“树莓派”,简写为 RPi，(或者 RasPi / RPI)是为学生计算机编程教育而设计，只有信用卡大小的卡片式电脑，其系统基于 Linux。 —— 来自百度百科的介绍 买来的树莓派是一块没有系统的开发板，到手的第一步就先要给树莓派安装系统，不然也没办法用。 安装系统前准备 树莓派一个（当然你要有电源适配器，没有的话移动电源也可以）。 SD 卡一张，树莓派使用 SD 卡作为容量，没有的 SD 卡是没法用的。 网线一</description>
    </item>
    
    <item>
      <title>Docker 使用</title>
      <link>https://binsheng.github.io/post/docker%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 22 Apr 2017 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/docker%E4%BD%BF%E7%94%A8/</guid>
      <description>Docker 简介 Docker 是一个开源的应用容器引擎。可以看成是一个特殊的环境，隔离了宿主机（电脑）和容器。做开发的时候通常会碰到在自己的电脑上没问题，放到服务器或者别人的电脑上就出问题了，通常我们会认为是环境不一致导致的，调试起来非常耗时费力。有了 Docker 这些问题迎刃而解。 经常在 Linux 上做测试的人员，做完测试就不用了。在过去我们会使用虚拟机，这样做不但占据者比较大的磁盘空间，而且运行启动耗时较长，性能不高。但是用 Docker 却可以随时</description>
    </item>
    
    <item>
      <title>在 Mac 终端中使用代理</title>
      <link>https://binsheng.github.io/post/mac%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86/</link>
      <pubDate>Thu, 09 Mar 2017 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/mac%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86/</guid>
      <description>作为一个程序员，天天和终端打交道。可是在 Mac 终端下使用 brew 安装软件却十分慢，即便你使用 ShadowSocks 配置了全局代理，却发现这么做依然没有效果，下载还是龟速。虽然可以通过配置国内的镜像来解决，但是后期下载还是很慢，效果就不好了。 简单使用 在终端使用 ShadowSocks 十分简单，只需在终端中输入下列指令就可 export ALL_PROXY = socks5://127.0.0.1:1080 现在可以试试 brew 更新软件了，速度蹭蹭的往上涨 不想用代理了，输入下面指令即可 unset ALL_PROXY 优化 每次想要使用代理的时候都要输入这么多记不住 把</description>
    </item>
    
    <item>
      <title>Android 网络服务发现（NSD）</title>
      <link>https://binsheng.github.io/post/nsd/</link>
      <pubDate>Mon, 03 Oct 2016 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/nsd/</guid>
      <description>这些日子碰到这样一个需求，需要在局域网中发现我们创建的某个特定设备，并连上互相通信。本以为要去遍历整个局域网，后来查阅相关资料后发现 Android 为我们提供了网络服务发现（Network Service Discovery）简称 NSD，就是本文要讲的东西了。 NSD 有什么用 用来扫描局域网中特定的服务，并与之通信。省去了自己去写发现协议。 NSD 怎么用 创建服务 首先要创建一个 ServerSocket，用来等待别人的连接 /** *创建一个 server 来获取端</description>
    </item>
    
    <item>
      <title>Go 入门</title>
      <link>https://binsheng.github.io/post/go%E5%85%A5%E9%97%A8/</link>
      <pubDate>Fri, 12 Aug 2016 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/go%E5%85%A5%E9%97%A8/</guid>
      <description>Go 语言简介 Go 是一门开源，在语言层上支持并发，带垃圾回收的新型编译型语言。具有动态语言的开发效率，静态语言的安全性。Go 语言是 Google 开发的，Go 语言的主要作者都是牛逼到不行的人物。比如： 肯·汤普逊(Ken Thompson):C 语言的设计者，Unix 操作系统的创建者，并于 1983 年获得图灵奖。 罗布·派克:Unix 小组的成员，《Unix 编程环境》作者之一。 罗伯特·格里泽默(Robert Griesemer)参与 Java 的 HotSpot 编译器和 Chrome 浏览器的</description>
    </item>
    
    <item>
      <title>Hexo 搭建博客</title>
      <link>https://binsheng.github.io/post/hexo/</link>
      <pubDate>Thu, 16 Jun 2016 00:00:00 +0800</pubDate>
      
      <guid>https://binsheng.github.io/post/hexo/</guid>
      <description>安装 Hexo 前的准备 Node.js 的安装 brew install node 安装 Git，当然你还得有 GitHub 账号 安装过 Xcode 的可以跳过这一步，Xcode 自带 Git。 没安装的可以安装 Xcode 也可以使用下面的命令安装 brew install git 安装 Hexo npm install -g hexo-cli 初始化 Hexo 初始化当前目录 hexo init &amp;quot;文件夹&amp;quot; //如果文件夹为空，则为当前目录(文件夹不要带引号) 安装依赖包 cd &amp;quot;文件夹&amp;quot; # 上一步新建的文件夹名字 npm install 配置 进入到初始化的目录，打开 _config.yml title: xxx #博客名字 description: xxx #博客</description>
    </item>
    
  </channel>
</rss>