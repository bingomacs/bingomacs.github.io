<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on dev.bins</title>
    <link>https://devbins.github.io/categories/java/</link>
    <description>Recent content in Java on dev.bins</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Mon, 13 Apr 2020 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://devbins.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java 垃圾回收机制</title>
      <link>https://devbins.github.io/post/gc/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/gc/</guid>
      <description>&lt;p&gt;Photo by Gary Chan on Unsplash&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;之前我们介绍了 JVM 运行时内存是怎么分配的，其中方法区和堆是线程共享的，这里的对象如果不需要使用了，需要释放掉。&lt;/p&gt;
&lt;p&gt;但我们很少像 C/C++ 一样去自己管理，释放内存，这其中就要归功于 &lt;code&gt;Java GC&lt;/code&gt; ，它在背后默默的工作着。&lt;/p&gt;
&lt;p&gt;虽然 &lt;code&gt;Java GC&lt;/code&gt; 在背后默默的工作着，但是我们一直都不了解它，今天来看看它是怎么工作的，这样出现问题了才有应对之法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM 运行时内存分配</title>
      <link>https://devbins.github.io/post/jvm/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/jvm/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;JVM&lt;/code&gt; 是 &lt;code&gt;Java&lt;/code&gt; 程序员绕不过去的坎，今天学习下 &lt;code&gt;Java&lt;/code&gt; 虚拟机运行时是怎么分配内存的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JVM&lt;/code&gt; 规范中规定， &lt;code&gt;JVM&lt;/code&gt; 运行时内存分为程序计数器、虚拟机栈、本地方法栈、方法区、堆，这5个部分，如下图所示。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>单例模式的多种写法</title>
      <link>https://devbins.github.io/post/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>https://devbins.github.io/post/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;单例模式介绍&#34;&gt;单例模式介绍&lt;/h2&gt;
&lt;p&gt;单例模式算是平常用的比较多的，而且也比较简单的模式之一。单例模式的作用就是保证在程序中只有一个实例存在。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>