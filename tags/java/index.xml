<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 自定义</title>
    <link>https://example.com/tags/java/</link>
    <description>Recent content in Java on 自定义</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Wed, 11 Jul 2018 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://example.com/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>单例模式的多种写法</title>
      <link>https://example.com/post/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%845%E4%B8%AD%E5%86%99%E6%B3%95/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>https://example.com/post/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%845%E4%B8%AD%E5%86%99%E6%B3%95/</guid>
      <description>单例模式介绍 单例模式算是平常用的比较多的，而且也比较简单的模式之一。单例模式的作用就是保证在程序中只有一个实例存在。 单例模式实现原理 单例模式需要保证在系统中只有一个实例，单例的对象就不能被随便创建。通常我们实例化对象通过 new 关键字来创建对象，如果用这种方式任何人想要该对象都可以通过 new 来实例化，这就不能保证单例模式的唯一性了。所以我们要让别人不能实例化该对象，该对象只能由我们实例化并提供给外部。实现这</description>
    </item>
    
  </channel>
</rss>